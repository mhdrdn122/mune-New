import React, { useEffect, useState } from "react";
import "./TestReorder.css";
import { Fragment } from "react";

const TestReorder = () => {
  const [items, setItems] = useState([
    "You asked if",
    "you could see me",
    "before I went to",
    "Spain, you didn't",
    "give a reason didn't",
    "know what you would",
    "say. But I was hoping",
    "that my breath on your",
    "face would blow every",
    "last thing into place",
  ]);
  const [dragged, setDragged] = useState(null); // storing the dragged item as an index
  const [mouse, setMouse] = useState([0, 0]);

  // get mouse coordenates
  useEffect(() => {
    const handler = (e) => {
      setMouse([e.x, e.y]);
    };

    document.addEventListener("mousemove", handler);

    return () => document.removeEventListener("mousemove", handler);
  }, []);

  const [dropZone, setDropZone] = useState(0);

  // get closest drop zone
  useEffect(() => {
    if (dragged !== null) {
      // get all drop-zones
      const elements = Array.from(document.getElementsByClassName("drop-zone"));
      // get all drop-zones' y-axis position
      // if we were using a horizontally-scrolling list, we would get the .left property
      const positions = elements.map((e) => e.getBoundingClientRect().top);
      // get the difference with the mouse's y position
      const absDifferences = positions.map((v) => Math.abs(v - mouse[1]));

      // get the item closest to the mouse
      let result = absDifferences.indexOf(Math.min(...absDifferences));

      // if the item is below the dragged item, add 1 to the index
      if (result > dragged) result += 1;

      setDropZone(result);
    }
  }, [dragged, mouse]);

  // drop item
  useEffect(() => {
    const handler = (e) => {
      if (dragged !== null) {
        e.preventDefault();
        setDragged(null);
      }
    };

    document.addEventListener("mouseup", handler);
    return () => document.removeEventListener("mouseup", handler);
  });
  return (
    <>
      {/* ----------FLOATING ITEM---------- */}
      {dragged !== null && (
        <div
          className="floating list-item"
          style={{
            left: `${mouse[0]}px`,
            top: `${mouse[1]}px`,
          }}
        >
          {items[dragged]}
        </div>
      )}
      {/* ----------MAIN LIST---------- */}
      <div className="list">
        <div
          className={`list-item drop-zone ${
            dragged === null || dropZone !== 0 ? "hidden" : ""
          }`}
        />
        {items.map((value, index) => (
          <>
            {dragged !== index && (
              <>
                <div
                  key={value}
                  className="list-item"
                  onMouseDown={(e) => {
                    e.preventDefault();
                    setDragged(index);
                  }}
                >
                  {value}
                </div>
                <div
                  className={`list-item drop-zone ${
                    dragged === null || dropZone !== index + 1 ? "hidden" : ""
                  }`}
                />
              </>
            )}
          </>
        ))}
      </div>
    </>
  );
};

export default TestReorder;
